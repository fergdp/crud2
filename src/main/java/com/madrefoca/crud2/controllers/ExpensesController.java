/*
 * Copyright (c) 2018, Southwest Airlines Co. All rights reserved.
 */
package com.madrefoca.crud2.controllers;

import com.madrefoca.crud2.model.Expense;
import com.madrefoca.crud2.exceptions.ResourceNotFoundException;
import com.madrefoca.crud2.repositories.ExpenseRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping(path="/expenses") // This means URL's start with /expenses (after Application path)
public class ExpensesController {

    private final Logger log = LoggerFactory.getLogger(ExpensesController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExpenseRepository expenseRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Expense> getAllExpenses() {
        // This returns a JSON or XML with the users
        return expenseRepository.findAll();
    }

    @GetMapping("/{year}/{month}")
    public ResponseEntity<?> getByMonthYear(@PathVariable("year") int year, @PathVariable("month") String month) {
        List<Expense> result = new ArrayList<>();
        if ("All".equals(month)) {
            result = expenseRepository.findByYear(year);
        } else {
            result = expenseRepository.findByMonthAndYear(month, year);
        }
        return new ResponseEntity(result, HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity<?> addorUpdateExpense(@RequestBody Expense expense) {
        expenseRepository.save(expense);
        return new ResponseEntity("Expense added succcessfully", HttpStatus.OK);
    }


    @GetMapping("/expense/{expenseId}")
    public @ResponseBody Expense getExpenseById(@PathVariable Long expenseId) {
        return expenseRepository.findById(expenseId)
                .orElseThrow(() -> new ResourceNotFoundException("ExpenseId " + expenseId + " not found"));
    }

    @PutMapping("/expense/{id}")
    ResponseEntity<Expense> updateExpense(@PathVariable Long id, @Valid @RequestBody Expense expense) {
        expense.setId(id);
        log.info("Request to update expense: {}", expense);
        Expense result = expenseRepository.save(expense);
        return ResponseEntity.ok().body(result);
    }

    @DeleteMapping("/delete/{expenseId}")
    public ResponseEntity<?> deleteExpense(@PathVariable Long expenseId) {
        return expenseRepository.findById(expenseId).map(expense -> {
            expenseRepository.delete(expense);
            return ResponseEntity.ok().build();
        }).orElseThrow(() -> new ResourceNotFoundException("ExpenseId " + expenseId + " not found"));
    }
}
