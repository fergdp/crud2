/*
 * Copyright (c) 2018, Southwest Airlines Co. All rights reserved.
 */
package com.madrefoca.crud2.controllers;

import com.madrefoca.crud2.model.Expense;
import com.madrefoca.crud2.exceptions.ResourceNotFoundException;
import com.madrefoca.crud2.model.Month;
import com.madrefoca.crud2.repositories.ExpenseRepository;
import com.madrefoca.crud2.repositories.MonthRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@Controller
@RequestMapping(path="/expenses") // This means URL's start with /expenses (after Application path)
public class ExpensesController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExpenseRepository expenseRepository;

    @Autowired
    private MonthRepository monthRepository;

    @PostMapping("/create/month/{monthId}")
    public @ResponseBody Expense createExpense(@PathVariable Long monthId,
                                               @Valid @RequestBody Expense expense) {
        return monthRepository.findById(monthId).map(month -> {
            expense.setMonth(month);
            return expenseRepository.save(expense);
        }).orElseThrow(() -> new ResourceNotFoundException("MonthId " + monthId + " not found"));
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Expense> getAllExpenses() {
        // This returns a JSON or XML with the users
        return expenseRepository.findAll();
    }

    @GetMapping("/month/{monthId}")
    public @ResponseBody Page<Expense> getAllExpensesByMonthId(@PathVariable Long monthId,
                                                Pageable pageable) {
        return expenseRepository.findByMonthId(monthId, pageable);
    }

    @GetMapping("/expense/{expenseId}")
    public @ResponseBody Expense getExpenseById(@PathVariable Long expenseId) {
        return expenseRepository.findById(expenseId)
                .orElseThrow(() -> new ResourceNotFoundException("ExpenseId " + expenseId + " not found"));
    }

    @PutMapping("/month/{monthId}/expense/{expenseId}")
    public @ResponseBody Expense updateExpense(@PathVariable Long monthId,
                                 @PathVariable Long expenseId,
                                 @Valid @RequestBody Expense expenseRequest) {
        if(!monthRepository.existsById(monthId)) {
            throw new ResourceNotFoundException("MonthId " + monthId + " not found");
        }

        return expenseRepository.findById(expenseId).map(expense -> {
            expense.setDescription(expenseRequest.getDescription());
            expense.setAmount(expenseRequest.getAmount());
            return expenseRepository.save(expense);
        }).orElseThrow(() -> new ResourceNotFoundException("ExpenseId " + expenseId + "not found"));
    }


    // TODO: 28/10/18 ver eso que devuelve responseEntity
    @DeleteMapping("/month/{monthId}/expense/{expenseId}")
    public ResponseEntity<?> deleteExpense(@PathVariable Long monthId,
                                           @PathVariable Long expenseId) {
        if(!monthRepository.existsById(monthId)) {
            throw new ResourceNotFoundException("MonthId " + monthId + " not found");
        }

        return expenseRepository.findById(expenseId).map(expense -> {
            expenseRepository.delete(expense);
            return ResponseEntity.ok().build();
        }).orElseThrow(() -> new ResourceNotFoundException("ExpenseId " + expenseId + " not found"));
    }

    @GetMapping(path="/test")
    public @ResponseBody String testing() {
        // This returns a JSON or XML with the users
        return "Hi Fer! test successful";
    }
}
